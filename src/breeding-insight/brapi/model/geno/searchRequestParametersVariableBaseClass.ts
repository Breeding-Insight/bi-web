/**
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface SearchRequestParametersVariableBaseClass { 
    /**
     * The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.  Use this parameter to only return results associated with the given crops.   Use `GET /commoncropnames` to find the list of available crops on a server.
     */
    commonCropNames?: Array<string>;
    /**
     * List of scale data types to filter search results
     */
    dataTypes?: Array<SearchRequestParametersVariableBaseClass.DataTypesEnum>;
    /**
     * **Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460  <br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
     */
    externalReferenceIDs?: Array<string>;
    /**
     * List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
     */
    externalReferenceIds?: Array<string>;
    /**
     * List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
     */
    externalReferenceSources?: Array<string>;
    /**
     * List of methods to filter search results
     */
    methodDbIds?: Array<string>;
    /**
     * Human readable name for the method <br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation
     */
    methodNames?: Array<string>;
    /**
     * The Permanent Unique Identifier of a Method, usually in the form of a URI
     */
    methodPUIs?: Array<string>;
    /**
     * List of ontology IDs to search for
     */
    ontologyDbIds?: Array<string>;
    /**
     * Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
     */
    page?: number;
    /**
     * The size of the pages to be returned. Default is `1000`.
     */
    pageSize?: number;
    /**
     * A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs.   Use this parameter to only return results associated with the given programs.   Use `GET /programs` to find the list of available programs on a server.
     */
    programDbIds?: Array<string>;
    /**
     * Use this parameter to only return results associated with the given program names. Program names are not required to be unique.  Use `GET /programs` to find the list of available programs on a server.
     */
    programNames?: Array<string>;
    /**
     * The unique identifier for a Scale
     */
    scaleDbIds?: Array<string>;
    /**
     * Name of the scale <br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
     */
    scaleNames?: Array<string>;
    /**
     * The Permanent Unique Identifier of a Scale, usually in the form of a URI
     */
    scalePUIs?: Array<string>;
    /**
     * **Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483  <br>The unique ID of a studies to filter on
     */
    studyDbId?: Array<string>;
    /**
     * List of study identifiers to search for
     */
    studyDbIds?: Array<string>;
    /**
     * List of study names to filter search results
     */
    studyNames?: Array<string>;
    /**
     * The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI <br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"
     */
    traitAttributePUIs?: Array<string>;
    /**
     * A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"
     */
    traitAttributes?: Array<string>;
    /**
     * List of trait classes to filter search results
     */
    traitClasses?: Array<string>;
    /**
     * The unique identifier for a Trait
     */
    traitDbIds?: Array<string>;
    /**
     * A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"
     */
    traitEntities?: Array<string>;
    /**
     * The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI <br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" 
     */
    traitEntityPUIs?: Array<string>;
    /**
     * The human readable name of a trait <br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
     */
    traitNames?: Array<string>;
    /**
     * The Permanent Unique Identifier of a Trait, usually in the form of a URI
     */
    traitPUIs?: Array<string>;
    /**
     * The ID which uniquely identifies a trial to search for
     */
    trialDbIds?: Array<string>;
    /**
     * The human readable name of a trial to search for
     */
    trialNames?: Array<string>;
}
export namespace SearchRequestParametersVariableBaseClass {
    export type DataTypesEnum = 'Code' | 'Date' | 'Duration' | 'Nominal' | 'Numerical' | 'Ordinal' | 'Text';
    export const DataTypesEnum = {
        Code: 'Code' as DataTypesEnum,
        Date: 'Date' as DataTypesEnum,
        Duration: 'Duration' as DataTypesEnum,
        Nominal: 'Nominal' as DataTypesEnum,
        Numerical: 'Numerical' as DataTypesEnum,
        Ordinal: 'Ordinal' as DataTypesEnum,
        Text: 'Text' as DataTypesEnum
    };
}